import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:clinic_eye/core/locale/l10n/app_localizations.dart';
import '../model/doctor.dart';
import '../provider/doctor_provider.dart';

class AddDoctorFormView extends ConsumerWidget {
  const AddDoctorFormView({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final GlobalKey<FormState> formKey = GlobalKey<FormState>();
    final TextEditingController nameController = TextEditingController();
    final TextEditingController specializationController =
        TextEditingController();
    final TextEditingController contactNumberController =
        TextEditingController();
    final TextEditingController emailController = TextEditingController();
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(title: Text(l10n.addPatient)), // Assuming 'Add New Doctor' can be mapped to 'Add Patient' or a new key `addDoctor`
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: formKey,
          child: Column(
            spacing: 16.0,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(l10n.patientMedicalHistory), // Assuming a generic message, or create a new key like `fillDoctorDetails`
              const Divider(),
              const SizedBox(height: 16.0),
              TextFormField(
                controller: nameController,
                decoration: InputDecoration(labelText: l10n.doctorName),
              ),
              TextFormField(
                controller: specializationController,
                decoration: InputDecoration(labelText: l10n.doctorSpecialty),
              ),
              TextFormField(
                controller: contactNumberController,
                decoration: InputDecoration(labelText: l10n.clinicPhoneNumber), // Assuming 'Contact Number' maps to this
              ),
              TextFormField(
                controller: emailController,
                decoration: InputDecoration(labelText: l10n.email),
              ),
              ElevatedButton(
                onPressed: () async {
                  if (formKey.currentState?.validate() ?? false) {
                    final doctor = Doctor(
                      id: '', // ID will be generated by Firestore
                      name: nameController.text,
                      specialty: specializationController.text,
                      phoneNumber: contactNumberController.text,
                      email: emailController.text,
                    );
                    final result = await ref.read(
                      addDoctorProvider(doctor).future,
                    );
                    if (!context.mounted) return; // Guard with mounted check
                    if (result.isSuccess) {
                      // Success handling
                      ref.invalidate(
                        getAllDoctorsProvider,
                      ); // Refresh the doctors list
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text(l10n.success)), // Or a more specific message like `doctorAddedSuccessfully`
                      );
                    } else {
                      // Error handling
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('${l10n.error}: ${result.errorMessage}'),
                        ),
                      );
                    }
                    // Clear the form fields after submission
                    formKey.currentState?.reset();
                  }
                },
                child: Text(l10n.add),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class EditDoctorFormView extends ConsumerWidget {
  final Doctor doctor;

  const EditDoctorFormView({super.key, required this.doctor});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final GlobalKey<FormState> formKey = GlobalKey<FormState>();
    final TextEditingController nameController = TextEditingController(
      text: doctor.name,
    );
    final TextEditingController specializationController =
        TextEditingController(text: doctor.specialty);
    final TextEditingController contactNumberController = TextEditingController(
      text: doctor.phoneNumber,
    );
    final TextEditingController emailController = TextEditingController(
      text: doctor.email,
    );
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(title: Text(l10n.editPatient)), // Assuming 'Edit Doctor Details' can be mapped to 'Edit Patient' or a new key `editDoctor`
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: formKey,
          child: Column(
            spacing: 16.0,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(l10n.notes), // Assuming a generic message or create a new key like `updateDoctorDetails`
              Divider(),
              const SizedBox(height: 16.0),
              TextFormField(
                controller: nameController,
                decoration: InputDecoration(labelText: l10n.doctorName),
              ),
              TextFormField(
                controller: specializationController,
                decoration: InputDecoration(labelText: l10n.doctorSpecialty),
              ),
              TextFormField(
                controller: contactNumberController,
                decoration: InputDecoration(labelText: l10n.clinicPhoneNumber), // Assuming 'Contact Number' maps to this
              ),
              TextFormField(
                controller: emailController,
                decoration: InputDecoration(labelText: l10n.email),
              ),
              ElevatedButton(
                onPressed: () async {
                  if (formKey.currentState?.validate() ?? false) {
                    final updatedDoctor = doctor.copyWith(
                      name: nameController.text,
                      specialty: specializationController.text,
                      phoneNumber: contactNumberController.text,
                      email: emailController.text,
                    );
                    final result = await ref.read(
                      updateDoctorProvider(updatedDoctor).future,
                    );
                    if (!context.mounted) return; // Guard with mounted check
                    if (result.isSuccess) {
                      // Success handling
                      ref.invalidate(
                        getAllDoctorsProvider,
                      ); // Refresh the doctors list
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text(l10n.success)), // Or a more specific message like `doctorUpdatedSuccessfully`
                      );
                    } else {
                      // Error handling
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('${l10n.error}: ${result.errorMessage}'),
                        ),
                      );
                    }
                  }
                },
                child: Text(l10n.save),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
